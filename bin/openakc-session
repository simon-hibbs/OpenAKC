#!/bin/bash

# Filename      : /usr/sbin/openakc-session
# Function      : OpenAKC Authentication Plugin
#
# Copyright (C) 2019-2020  A. James Lewis
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

#
# Static Values
#

#trap '' SIGTSTP
#trap '' SIGINT
RELEASE="0.0"

#
# Values from OpenAKC Stage One
#
API=${1}
RPPID=${2}
HID=${3}
HNS=${4}

#
# Defaults
#
CONFFILE="/etc/openakc/openakc.conf"
DATADIR="/var/lib/openakc"
SESSKEY=""
TMOUT=5
DEBUG="yes"
PERMITROOT="no"
QUIZ="yes"
FAKESUDO="no"

#
# Functions
#
logstatus () {
 logger -p authpriv.info -t "openakc-session[$$]" "INFO - $1"
}

logauth () {
 logger -p authpriv.notice -t "openakc-session[$$]" "AUTH - $1"
}

logdebug () {
 if [ "x$DEBUG" == "xyes" ];then
  logger -p authpriv.debug -t "openakc-session[$$]" "DEBUG - $1"
 fi
}

logwarn () {
 logger -p authpriv.warn -t "openakc-session[$$]" "WARNING - $1"
}

logerr () {
 logger -p authpriv.err -t "openakc-session[$$]" "ERROR - $1"
}

isok () {
 ISOK=$(echo $OK | cut -d ":" -f 1)
 if [ "x$ISOK" != "xOK" ]; then
  logerr "Quitting due to unexpected command response - $OK"
  echo "quit" >&5
  exec 5>&-
  exit 1
 fi
}

sendmessage () {
#FIXME redirect stderr, and check exit code
 MESSAGE=$(echo "$MESSAGE" | openssl enc ${SSLOPTS}${SESSKEY} 2> /dev/null | base64 -w 0 | tr -d '\r')
 echo "message $MESSAGE" >&5
}

#
# OpenAKC command line check.
#
if [ "x$(cat /proc/$PPID/cmdline|cut -c 1-4)" != "xsshd" ]; then
 echo "OpenAKC Copyright (C) 2019-2020  A. James Lewis.  Version is ${RELEASE}."
 echo ""
 echo "This program comes with ABSOLUTELY NO WARRANTY; for details type \"license\"".
 echo "This is free software, and you are welcome to redistribute it"
 echo "under certain conditions; See LICENSE file for further details."
 echo ""
 echo "OpenAKC Session cannot be run from the command line."
 echo ""
 exit 1
fi

#
# Find OpenSSL Version
#
OSSLV=$(openssl version 2> /dev/null | tr 'a-zA-Z' ' ' | awk '{print $1}' | awk -F. '{ printf("%02d%02d%02d", $1,$2,$3) }')
if [ "$OSSLV" -eq "$OSSLV" ] 2>/dev/null; then
 :
else
 logerr "Unrecognised OpenSSL version, exiting."
 exit 1
fi
if [ $OSSLV -ge 908 ];then
 CPROTOS="akcrsa1" # Space Separated List
else
 logerr "OpenSSL too old, exiting."
 exit 1
fi
if [ $OSSLV -ge 908 ];then
 CPROTOS="akcrsa1 akcrsa1.1" # Space Separated List
fi


#
# Get Configuration File (or exit).
#
if [ -r $CONFFILE ]; then
 source ${CONFFILE}
else
 logerr "Can't find config file, exiting."
 exit 1
fi

#
# Transient Values
#
DAT=$(date "+%c")
SDAT=$(date "+%s")

#
# Initial Startup
#

#
# Validate Config FIXME Needs more checks. (ESP API hosts's)
#
if [ "$CACHETIME" -eq "$CACHETIME" ] 2>/dev/null; then
 :
else
 logwarn "Cache time $CACHETIME is not a number, defaults to 60 seconds"
 CACHETIME=60
fi
#
if [ "x$ENABLED" != "xyes" ]; then
 logstatus "Disabled in config \"ENABLED\" must be \"yes\" to enable OpenAKC"
 exit 1
fi
#
if [ "$PORT" -eq "$PORT" ] 2>/dev/null; then
 if [ $PORT -gt 65535 ]; then
  logerr "Warning - TCP port $PORT is out of range, exiting"
  exit 1
 fi
else
 logerr "TCP port $PORT is not a number, exiting"
 exit 1
fi


#
# Start of illogical function dance.
#
apicall () {
 # Connect to API
 exec 5<>/dev/tcp/${1}/${PORT}
 success=${?}
 if [ $success -ne 0 ]; then
  exit $success
 fi
 
 # NB If we're still going, then we're it!
 
 read TAGLINE <&5
 read OK <&5
 isok
 echo "getproto" >&5
 read PROTOS <&5
 read OK <&5
 isok
 
 #
 # Check our protocol is available
 #
 POK=0
 for C in $CPROTOS
 do
  for P in $PROTOS
  do
   if [ "x$P" == "x$C" ]; then
    POK=1
    PROTO=$C
   fi
  done
 done
 if [ "x$POK" == "x0" ]; then
  logerr "No matching protocols found, exiting!"
  exit 1
 fi
 #
 case "$PROTO" in
  akcrsa1)
   SSLOPTS="-aes-256-cbc -md md5 -salt -in /dev/stdin -pass pass:"
   ;;
  akcrsa1.1)
   SSLOPTS="-aes-256-cbc -md sha512 -pbkdf2 -iter 13370 -salt -in /dev/stdin -pass pass:"
   ;;
  *)
   logerr "Can't set OpenSSL Options (Code Error), exiting."
   exit 1
 esac

 #
 # Initialise Public Key
 #
 echo "setproto $PROTO" >&5
 read OK <&5
 isok

 if [ ! -f "${DATADIR}/keys/openakc-server-pubkey-${1}.pem" ]; then
  logerr "Missing public key, exiting!"
  echo "AKC Session Failed, public key ${DATADIR}/keys/openakc-server-pubkey-${1}.pem inaccessible."
  echo "Please contact your Sysadmin or Security Administrator"
  exit 1
 fi

 #
 # Generate Session Key and register it.
 #
 SESSKEY=$(openssl rand -hex 26|tr '0' 'z'|tr '2' 'j')
 SESSCODE=$(echo $SESSKEY | openssl rsautl -encrypt -inkey "${DATADIR}/keys/openakc-server-pubkey-${1}.pem" -pubin -in /dev/stdin | base64 -w 0 | tr -d '\r')

 echo "sessioncode $SESSCODE" >&5
 read OK <&5
 isok

 if [ "x$SESSCODE" = "x" ]; then
  echo "OpenAKC Session Failed, to negotiate session with backend."
  echo "Please contact your Sysadmin or Security Administrator"
  exit 1
 fi

 MESSAGE=$(echo "sessiondata ${RPPID}-$(hostid)" ${SSH_CLIENT} ${SSH_TTY});sendmessage
 read SESSDAT <&5
 read OK <&5
 isok
 
 SESSDAT=$(echo "$SESSDAT" | base64 -d | openssl enc -d ${SSLOPTS}${SESSKEY} 2> /dev/null | tr -d '\r')
 logdebug "Session Data - ${SESSDAT}"
 HNS=$(echo $SESSDAT | cut -d ";" -f 1) # Short Hostname
 HND=$(echo $SESSDAT | cut -d ";" -f 2) # Domain Name
 HID=$(echo $SESSDAT | cut -d ";" -f 3) # Hostid
 HIP=$(echo $SESSDAT | cut -d ";" -f 4) # Host IP
 USR=$(echo $SESSDAT | cut -d ";" -f 5) # Username
 KEYF=$(echo $SESSDAT | cut -d ";" -f 6) # Key Fingerprint
 API=$(echo $SESSDAT | cut -d ";" -f 7) # API Hostname
 REL=$(echo $SESSDAT | cut -d ";" -f 8) # Client Code Release
 RPPID=$(echo $SESSDAT | cut -d ";" -f 9) # Remote Parent PID
 RUSR=$(echo $SESSDAT | cut -d ";" -f 10) # Remote Username
 SHL=$(echo $SESSDAT | cut -d ";" -f 11) # Shell
 SCP=$(echo $SESSDAT | cut -d ";" -f 12) # SCP replace
 CAP=$(echo $SESSDAT | cut -d ";" -f 13) # Capabilities
 FRM=$(echo $SESSDAT | cut -d ";" -f 14) # Permitted Source IP
 TIM=$(echo $SESSDAT | cut -d ";" -f 15) # Daily Time Window
 CMD=$(echo $SESSDAT | cut -d ";" -f 16) # Permitted Remote Commands
 DAY=$(echo $SESSDAT | cut -d ";" -f 17) # Permitted Days
 REC=$(echo $SESSDAT | cut -d ";" -f 18 | tr 'A-Z' 'a-z') # Record Session
 EXT=$(echo $SESSDAT | cut -d ";" -f 19) # Extensions
 RIP=$(echo $SESSDAT | cut -d ";" -f 20) # Remote IP
 
 RESTRICT=${CAP}
 KLOG=0
 KEXIT=0
  
 if [ "x$SSH_ORIGINAL_COMMAND" != "x" ]; then
  if [  "x$SSH_ORIGINAL_COMMAND" == "xinternal-sftp" ]; then
   logstatus "OpenAKC session does not support \"internal-sftp\", define \"CMD=internal-sftp\" in role to bypass session control."
   echo "quit" >&5
   exec 5>&-
   exit 1
  fi
  export OCOMMAND=$(which $(echo $(echo $SSH_ORIGINAL_COMMAND | cut --delimiter=" " -f 1)))  
  export BCOMMAND=$(basename "${OCOMMAND}")
  PERMITC=0
 else
  export OCOMMAND=""
  PERMITC=1
 fi 
 
 logdebug "Checking Permitted Commands"
 
 for i in `echo $CMD | tr ',' ' '`
 do
  logdebug "BCOMMAND = ${BCOMMAND} vs ${i}"
  if [ "x${BCOMMAND}" == "x${i}" ]||[ "x${i}" == "xany" ]||[ "x${OCOMMAND}" == "x${i}" ]; then
   if [ "x${SSH_ORIGINAL_COMMAND:0:1}" != "x/" ]||[ "x${i}" == "xany" ]; then
    logdebug "Permitting Relative Path ${i}"
    PERMITC=1
   fi
   logdebug "Compare = ${SSH_ORIGINAL_COMMAND} with ${i}"
   if [ "x${SSH_ORIGINAL_COMMAND:0:1}" == "x/" ]&&[ "x${SSH_ORIGINAL_COMMAND}" == "x${i}" ]; then
    logdebug "Permitting Absolute Path ${i}"
    PERMITC=1
   fi
  fi
 done
 #
 if [ $PERMITC -eq 0 ]; then
  if [ "x${FAKESUDO}" == "xyes" ]; then
   logger -t sudo -p authpriv.info "  ${RUSR} : command not allowed ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SSH_ORIGINAL_COMMAND} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
  fi
  logauth "Remote user ${RUSR} : OpenAKC role does not permit command ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SSH_ORIGINAL_COMMAND} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
  if [ "x$BCOMMAND" != "xsftp-server" ]; then
   echo "OpenAKC role does not permit command, must match the following command(s) - \"${CMD}\""
  fi
  echo "quit" >&5
  exec 5>&-
  exit 1
 fi 
 
 if [ "x$SSH_TTY" != "x" ]; then
  logdebug "Going to interactive mode"
  echo "OpenAKC Interactive Session Initialized"
  echo 

# FIXME kill session if keystroke logging using fifo is broken.

  if [ "x${QUIZ}" == "xyes" ]; then
   logstatus "Presenting user quiz for session ${RPPID}-$(hostid)"
   echo "Please enter the reason for your connection"
   echo -n "Title / Change Number: "
   read -t 30 i
   echo "Title: $i" > "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
   echo "Description (blank line to end)"
   while true
   do
   read -t 45 j
   echo "Summary: $j" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
   [ "x$j" == "x" ]&&break
   done
  else
   echo "Title: Quiz Disabled" > "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  fi
  echo "" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "Network Source: ${SSH_CLIENT}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "Key Used: ${KEYF}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "TTY: ${SSH_TTY}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "Term Type: ${TERM}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "Term Language: ${LANG}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "Shell: ${SHL}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "Restricted Capabilties: ${CAP}" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"
  echo "" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz"

  MESSAGE=$(echo "logturn ${USR}@${HNS}.${RUSR}.${RPPID}-$(hostid)");sendmessage
  KLOG=1
  mkfifo "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp"
  ( cat "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).quiz" "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp" | /usr/bin/openakc-hpenc -a chacha20 -b 128 -k $SESSKEY >&5 ) &


  if [ "x$RESTRICT" != "x" ]; then
   echo "Restrictions Applied":-
   for i in `echo $RESTRICT | tr ',' ' '`
   do
    echo "Captbility $i withdrawn by role config"
   done
   echo
  fi

  if [ "x${PERMITROOT}${EUID}" != "xno0" ]; then
   if [ "x${FAKESUDO}" == "xyes" ]; then
    logger -t sudo -p authpriv.info "  ${RUSR} : TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SHL} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   fi
   logauth "Remote user ${RUSR} : granted access ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SHL} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   if [ "x${REC}" == "xyes" ]; then
    /usr/bin/openakc-cap --drop=$RESTRICT -- -c "script -ec \"${SHL}\" -qaf \"/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp\""
   else
    echo "Session Logging Disabled By Role" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp"
    /usr/bin/openakc-cap --drop=$RESTRICT -- -c "${SHL}"
   fi
   KEXIT=$?
  else
   if [ "x${FAKESUDO}" == "xyes" ]; then
    logger -t sudo -p authpriv.info "  ${RUSR} : command not allowed ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SHL} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   fi
   logauth "Remote user ${RUSR} : OpenAKC root login not allowed by client config ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SHL} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   echo "This host is configured to deny root access via OpenAKC"
   echo "You will be disconnected, please contact your system administrator"
   echo "PERMITROOT configuration blocked this login" > "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp"
   logauth "PERMITROOT configuration blocked access to root account by ${KEYF}(${RUSR}) from ${SSH_CLIENT}"
   sleep 3
  fi
#
# 
#   
 else
  if [ "x${REC}" == "xyes" ]; then
   MESSAGE=$(echo "logturn ${USR}@${HNS}.${RUSR}.${RPPID}-$(hostid)");sendmessage
   KLOG=1
   echo "\"$SSH_ORIGINAL_COMMAND\" called via ssh" > "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).cmd"
   echo "" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).cmd"
   mkfifo "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp"
   ( cat "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).cmd" "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp" | /usr/bin/openakc-hpenc -a chacha20 -b 128 -k $SESSKEY >&5 ) &
  fi
 
  if [ "x${PERMITROOT}${EUID}" != "xno0" ]; then
   if [ "x${FAKESUDO}" == "xyes" ]; then
    logger -t sudo -p authpriv.info "  ${RUSR} : TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SSH_ORIGINAL_COMMAND} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   fi
   logauth "Remote user ${RUSR} : granted access ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SSH_ORIGINAL_COMMAND} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   if [ "x${BCOMMAND}" == "xscp" ]; then
    SCPCMD=$(echo "$SSH_ORIGINAL_COMMAND" | awk '{print $1" "$2}')
    SCPVAL=$(echo "$SSH_ORIGINAL_COMMAND" | awk '{print $3}' | sed -e "$SCP")
    /usr/bin/openakc-cap --drop=$RESTRICT -- -c "$SCPCMD $SCPVAL"
    KEXIT=$?
    [ "x${SCPCMD}" == "xscp -f" ]&&SCPCMD="GET"
    [ "x${SCPCMD}" == "xscp -t" ]&&SCPCMD="PUT"
    echo "SCP ${SCPCMD} ${SCPVAL} executed, exit code $KEXIT" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp"
    SCPEXIT="Failed"
    [ $KEXIT -eq 0 ]&&SCPEXIT="Succeeded"
    logger -t openakc-scp -p local6.info "${SCPCMD} ${SCPVAL} ; ${SCPEXIT} for user $(whoami)"
   elif [ "x${BCOMMAND}" == "xsftp-server" ]; then
    [[ $SSH_ORIGINAL_COMMAND == *"/sftp-server" ]]&&SSH_ORIGINAL_COMMAND="${SSH_ORIGINAL_COMMAND} -f LOCAL6 -l INFO"
    /usr/bin/openakc-cap --drop=$RESTRICT -- -c "$SSH_ORIGINAL_COMMAND"
    KEXIT=$?
    echo "$SSH_ORIGINAL_COMMAND executed" >> "/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp"
   else
    if [ "x${REC}" == "xyes" ]; then
     /usr/bin/openakc-cap --drop=$RESTRICT -- -c "script -ec \"${SSH_ORIGINAL_COMMAND}\" -qaf \"/tmp/openakc-$(whoami)-${RPPID}-$(hostid).tmp\""
    else
     /usr/bin/openakc-cap --drop=$RESTRICT -- -c "${SSH_ORIGINAL_COMMAND}"
    fi
    KEXIT=$?
   fi
  else
   if [ "x${FAKESUDO}" == "xyes" ]; then
    logger -t sudo -p authpriv.info "  ${RUSR} : command not allowed ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SSH_ORIGINAL_COMMAND} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   fi
   logauth "Remote user ${RUSR} : OpenAKC root login not allowed by client config ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; COMMAND=${SSH_ORIGINAL_COMMAND} ; CAP_RESTRICTIONS=${RESTRICT} ; OPENAKC_SESSION=${RPPID}-$(hostid) ; API=${API}"
   logauth "PERMITROOT configuration blocked access to root account by ${KEYF}(${RUSR}) from ${SSH_CLIENT}"
   sleep 3
  fi
 fi
#
  rm "/tmp/openakc-$(whoami)-${RPPID}-$(hostid)."* 2> /dev/null
 
 logstatus "Remote user ${RUSR} : session ended ; TTY=${SSH_TTY} ; VIA=${RIP} ; USER=$(whoami) ; OPENAKC_SESSION=${RPPID}-$(hostid)"
 [ $KLOG -eq 0 ]&&echo "quit" >&5
 exec 5>&-
 logdebug "Passing on exit code $KEXIT"
 exit $KEXIT
}


apicall $API
